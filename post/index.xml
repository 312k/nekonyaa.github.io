<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on nekonyaa</title><link>https://312k.github.io/nekonyaa.github.io/post/</link><description>Recent content in Posts on nekonyaa</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2020 Powered by Hugo :: © nekonyaa</copyright><lastBuildDate>Wed, 06 Jan 2021 16:54:19 +0900</lastBuildDate><atom:link href="https://312k.github.io/nekonyaa.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>BrixelCTF-tt6mzn write up</title><link>https://312k.github.io/nekonyaa.github.io/post/post4/brixelctf-tt6mzn/</link><pubDate>Wed, 06 Jan 2021 16:54:19 +0900</pubDate><guid>https://312k.github.io/nekonyaa.github.io/post/post4/brixelctf-tt6mzn/</guid><description>はじめに 年末から年始にかけてBrixelCTFに参加しました。 結果はこんな感じ。 Internet・Programming・Cryptographyを中心に11問を解くことができました。 チームとしてはスコアが212ポイント、順位が830人中317位でした。
Programming Are you fast enough? urlを開くと次のような画面が表示されます。「毎回変わるランダムな文字列を入力ボックスに入力してenterボタンを押す」までを1秒以内にやれ、とあります。 もちろん普通に要請にこたえることはできないので、プログラムを書きます。 seleniumというフレームワークを使えばこれを実現できます。 seleniumはブラウザをプログラムで操作するツールです。 私はchromeとpythonを使って実装しました。 seleniumのインストールのほかにChromeDriverをインストールする必要があったのでちょっとめんどくさい。 書いたコードは以下です。
from selenium import webdriver from selenium.webdriver.common.keys import Keys import time def main(): driver = webdriver.Chrome(executable_path=&amp;#39;./driver/chromedriver.exe&amp;#39;) driver.get(&amp;#39;http://timesink.be/speedy&amp;#39;) # urlを開く ans = driver.find_element_by_id(&amp;#34;rndstring&amp;#34;) # ランダム文字列を取得 inputbox = driver.find_element_by_name(&amp;#34;inputfield&amp;#34;) # 入力ボックスを取得 inputbtn = driver.find_element_by_id(&amp;#34;submitbutton&amp;#34;) # ボタンを取得 inputbox.send_keys(ans.text) # 入力欄に文字列を入れる inputbtn.click() # ボタンをクリック time.sleep(60) # 待機 main() find_element_by_～()という関数で文字列やボタンを取得し、その文字列を取り出したり、ボタンをクリックしたりすることができます。 実行が終わるとウィンドウが自動で閉じてしまうので、すべての処理が終わったら60秒待機するようにしています。 実行するとフラグが表示されました。
Keep walking&amp;hellip; 変数X, Y, answerをそれぞれ初期値1に設定し、
answerの値を X * Y + answer + 3 に更新 Xをインクリメント Yをインクリメント という処理をXが525になるまで繰り返した時のanswerの値を求めなさい。という問題です。 手動でも解けないことはなさそうですがプログラムを書きます。</description></item><item><title>BrixelCTF-312k write up</title><link>https://312k.github.io/nekonyaa.github.io/post/post3/brixelctf-312k/</link><pubDate>Sat, 02 Jan 2021 15:14:39 +0900</pubDate><guid>https://312k.github.io/nekonyaa.github.io/post/post3/brixelctf-312k/</guid><description>はじめに 年末から年始にかけてBrixelCTFに参加しました。 解いた問題は16問で獲得スコアが212ポイント、順位は830人中317位でした。 初めてwrite upを書いてみます。
OSINT A quick search この問題は画像からなんという名前のタワーなのか調べる問題です。Google画像検索で写真のタワーを検索しましたところ、Eben_EzerがFlagでした。
Reverse engineering / cracking Cookieee! この問題はいわゆるクッキークリッカーで10,000,000(一千万回)のクリックでFlagが表示されます。ですのでうさみみハリケーンを使ってメモリの書き換えをしました。 Vectorからうさみみハリケーンをダウンロードし、問題のファイルを実行し、UsaMimi64を起動して、リスト更新で問題ファイルを選択します。そしてAlt+Fで範囲検索を起動します。確保・記録して0を通常検索実行します。なぜ0なのかというと現在のClicks回数が0であるということはメモリのどこかに保存されているからです。残り一つになるまで値を増やします。写真では13個クッキーをクリックしました。するとアドレスが選択されるので適当に値を設定して、Flagが発見されました。no peeking! この問題は.NET Frameworkで作られた問題からFlagを探す問題です。デコンパイラがMicrosoft ストアであります。問題のファイルを開きその中のshowFlag():objectに答えが隠されていました。Old tech Goodbye old friend 2020年度いっぱいでサポートが終了したFlashplayerの問題です。ファイルを実行するとGoodbye old friendがずっと往復しています。窓の杜からFlashplayerを展開するツールを使います。 実行してドラックアンドドロップで展開されるのでhugflashディレクトリにgoodbyeフォルダが作成されます。その中のgoodbye.logにFlagが隠されていました。Cryptography flawed この問題はパスワードハッシュからパスワードを求める問題です。32文字のmd5でハッシュされているようなのです。そのためググりハッシュリストを保存しているサイトを使います。よって答えはnotsecureとなりました。
shit(実際の問題タイトルとは異なります) この問題は合字を使った問題です。ニコニコ大百科で「たすけて」と調べると分解された内容が出てきます。ブラウザによって異なるため今回は実際には合字は使いません。この問題はtt6-mznのアドバイスによってわかりました。末尾に=があることからBase64でエンコードされたものと考えました。Base64デコードサイトでデコードするとバイナリが出てきます。バイナリをテキストに変換するサイトそれにバイナリからテキスト変換するとFlagが出てきます。
Internet Hidden Code この問題はかの有名のコナミコマンドをすると答えが出てきます
robotopia この問題は検索エンジンのクローラーの気分になってとく問題です。たいていのサイトにはrobots.txtがあります。よって問題のサイトのURLに/robots.txtを追加して答えが現れます。
Discord この問題のFlagはDiscordの今回のCTFのチャンネル内にありました。
login1 この問題はパスワード自体がFlagという問題です。Ctrl+Shift+Iで開発者ツールを開き要素を確認するとjavascriptでパスワードと比較している部分があります。よってif文の条件がFlagです。
Browsercheck この問題はクローラーのユーザーエージェントと比べているようです。よって開発者ツールでユーザーエージェントを偽装すると正解です。
Flat earth この問題はまず問題の管理者がログインするところを探すところから始まります。てきとうにマウスを動かすか開発者ツールの要素からログインする画面に移ります。そして管理者ログインをします。この問題はSQLインジェクションを用いる問題です。ユーザー名に
&amp;#39; OR 1=1-- と入力するとFlagが現れます。このことについてはipaが解説しているサイトにあります。
Steganography Doc-ception この問題はtt6-mznの助言によって解けました。問題ファイルにはdocxの中にdocxが入れ子のようになっているという問題です。7-zipなどで解凍するとflag.txtが見つかるので答えがわかります。
Scan me この問題はQRコードやバーコードを解いていく問題です。まずはQRコードの中にQRコードが隠されているので開きます。QRコードは右下以外3辺に四角があります。 そのあとはただバーコードの内容を送るだけです。アプリによっては対応バーコードが少ないものもあるので適切に切り替えてください。
Rufus the vampire cat この問題は写真の中にsteghideされたテキストを探す問題です。steghideには多くのデコーダーがありますが、今回はSteganographic_Decoderを用いてデコードしました。問題の画像ファイルを選択しtext/plainと入力し、デコードするとFlagが得られました。
おわりに 以上が私が解いた問題です。初めて知ったことが多くて勉強になりました。またチーム内でアドバイスができたのはよかったです。</description></item><item><title>Visual Studio Code でMingw を使う方法</title><link>https://312k.github.io/nekonyaa.github.io/post/post2/vscodemingw/</link><pubDate>Thu, 31 Dec 2020 23:11:51 +0900</pubDate><guid>https://312k.github.io/nekonyaa.github.io/post/post2/vscodemingw/</guid><description>はじめに 当投稿ではMingw-w64にPATHがデフォルト状態で通っていることを前提としています。またセットアップにはVisual Studio Codeがインストールしてください。 またユーザー名は&amp;quot;まぞく&amp;quot;としてありますのでお使いの環境に合わせて読み替えてください。
拡張機能のダウンロード まずはCtrl+Shift+xと入力し、C/C++拡張機能をダウンロードしてください。
セットアップ File→Open Folderを選択して任意のフォルダを選択してください。 そして、File→New Fileでファイルを作成し、File→Save ASで任意の名前で保存してください(ここではmain.cとしました)
テキスト入力欄に
#include&amp;lt;stdio.h&amp;gt; int main(){ printf(&amp;#34;こんにちは！世界&amp;#34;); } と入力してください。 拡張機能の設定 F1キーでuiと入力し、C/C++; Edit Configurations(UI)を選択してください。すると以下の画像のように開かれます。 そこのコンパイラパスでC:/Program Files/mingw-w64/x86_64-8.1.0-posix-seh-rt_v6-rev0/mingw64/bin/gcc.exeを入力するか右の逆三角からコンパイラパスを選択してください。
そうするとInteliSenseモードでエラーが出てくるので、プルダウンよりgcc-x64を選びます。 コンパイル コンパイルして実行するためCtrl+F5→Enter→Enter するといろいろな画面が表示され最終的にはlaunch.jsonが出ます。 そのタブを閉じmain.cに戻ります。 下のタブでTERMINALを選択するとこんにちは!世界と表示されます。 これでvscodeでC言語が使えるようになりました。
まとめ 公式サイトには様々な方法が紹介されているのでご参照ください。
参考にしたサイト https://qiita.com/OcoToOo/items/f1d0a125327f5659ad52 https://code.visualstudio.com/docs/languages/cpp#_debugging</description></item><item><title>このサイトについて</title><link>https://312k.github.io/nekonyaa.github.io/post/post1/first/</link><pubDate>Wed, 30 Dec 2020 21:41:10 +0900</pubDate><guid>https://312k.github.io/nekonyaa.github.io/post/post1/first/</guid><description>はじめまして Hugoという静的サイトジェネレーターで本サイトを生成しました。 また本サイトのテーマはhugo-theme-terminalを用いました。
ここで書くこと このサイトはCTFのwrite upを中心にして書きます。またメンバーによって寄稿されたブログも載せます。</description></item></channel></rss>